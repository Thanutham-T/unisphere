import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:go_router/go_router.dart';
import '../constants/api_constants.dart';
import '../logging/app_logger.dart';
import '../services/key_value_storage_service.dart';
import '../../features/auth/presentation/bloc/auth_bloc.dart';
import '../../features/auth/presentation/bloc/auth_event.dart';

/// Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ auto logout ‡πÄ‡∏°‡∏∑‡πà‡∏≠ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
class AuthService {
  static final AuthService _instance = AuthService._internal();
  factory AuthService() => _instance;
  AuthService._internal();

  KeyValueStorageService? _storageService;
  
  void initialize(KeyValueStorageService storageService) {
    _storageService = storageService;
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö auto logout ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 401 Unauthorized
  /// ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î error ‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
  Future<void> handleUnauthorized(BuildContext context, {String? reason}) async {
    AppLogger.warning('üö™ Auto logout due to unauthorized access: ${reason ?? "Token expired"}');
    
    try {
      // Clear tokens from storage
      if (_storageService != null) {
        await _storageService!.removeEncrypted(ApiConstants.accessTokenKey);
        await _storageService!.removeEncrypted(ApiConstants.refreshTokenKey);
        await _storageService!.removeEncrypted(ApiConstants.tokenTypeKey);
        AppLogger.debug('‚úÖ Auth tokens cleared from storage');
      }

      // Trigger logout event in AuthBloc
      if (context.mounted) {
        context.read<AuthBloc>().add(const LogoutRequested());
        
        // Navigate to login screen
        _navigateToLogin(context);
        
        // Show user-friendly message
        _showLogoutMessage(context, reason);
      }
    } catch (e) {
      AppLogger.error('‚ùå Error during auto logout', e);
      
      // Fallback: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      if (context.mounted) {
        _navigateToLogin(context);
      }
    }
  }

  /// Navigate to login screen (‡πÉ‡∏ä‡πâ pushReplacement ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÑ‡∏î‡πâ)
  void _navigateToLogin(BuildContext context) {
    try {
      if (context.mounted) {
        // ‡πÉ‡∏ä‡πâ go ‡πÅ‡∏ó‡∏ô pushReplacement ‡πÄ‡∏û‡∏∑‡πà‡∏≠ clear navigation stack
        context.go('/login');
        AppLogger.debug('üîÑ Navigated to login screen');
      }
    } catch (e) {
      AppLogger.error('‚ùå Navigation error', e);
    }
  }

  /// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  void _showLogoutMessage(BuildContext context, String? reason) {
    try {
      if (context.mounted) {
        String message;
        if (reason?.contains('401') == true || reason?.contains('Unauthorized') == true) {
          message = '‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
        } else {
          message = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠';
        }

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(message),
            backgroundColor: Colors.orange,
            duration: const Duration(seconds: 3),
            action: SnackBarAction(
              label: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
              textColor: Colors.white,
              onPressed: () => _navigateToLogin(context),
            ),
          ),
        );
      }
    } catch (e) {
      AppLogger.error('‚ùå Error showing logout message', e);
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<bool> isTokenValid() async {
    try {
      if (_storageService == null) return false;
      
      final token = await _storageService!.getEncryptedString(ApiConstants.accessTokenKey);
      return token != null && token.isNotEmpty;
    } catch (e) {
      AppLogger.error('‚ùå Error checking token validity', e);
      return false;
    }
  }

  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö manual logout (‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° logout)
  Future<void> manualLogout(BuildContext context) async {
    AppLogger.info('üö™ Manual logout requested');
    
    try {
      if (context.mounted) {
        context.read<AuthBloc>().add(const LogoutRequested());
        _showLogoutMessage(context, '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (e) {
      AppLogger.error('‚ùå Error during manual logout', e);
      
      // Fallback: clear tokens manually
      if (_storageService != null) {
        await _storageService!.removeEncrypted(ApiConstants.accessTokenKey);
        await _storageService!.removeEncrypted(ApiConstants.refreshTokenKey);
        await _storageService!.removeEncrypted(ApiConstants.tokenTypeKey);
      }
      
      if (context.mounted) {
        _navigateToLogin(context);
      }
    }
  }
}